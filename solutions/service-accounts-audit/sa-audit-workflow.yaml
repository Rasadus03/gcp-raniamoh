main:
  steps:
  - Init:
      assign:
      - projects:
      - saActivities:
      - returnInsights: []
      - insightText:
      - inactiveDays: 30
      - lastActiveTime: ${sys.now() - (inactiveDays*24*60*60)}
  - ReadProjects:
      call: http.get
      args:
        url: https://cloudresourcemanager.googleapis.com/v3/projects
        auth:
          type: OAuth2
          scopes: "https://www.googleapis.com/auth/cloud-platform"
        headers:
          Accept: "application/json"
        query:
          parent: "organizations/ORG_ID"
      result: projects
  - ProcessProjects:
      for:
        value: project
        in: ${projects.body.projects}
        steps:
        - LoadProjectName:
            assign:
            - projectId: ${project.projectId}
        - EnableActivityAnalysisAPI:
            call: http.post
            args:
              url: ${"https://serviceusage.googleapis.com/v1/projects/"+projectId+"/services/policyanalyzer.googleapis.com:enable"}
              auth:
                type: OAuth2
                scopes: "https://www.googleapis.com/auth/cloud-platform"
              headers:
                Accept: "application/json"
            result: saActivities
        - ReadSAActivities:
            call: http.get
            args:
              url: ${"https://policyanalyzer.googleapis.com/v1/projects/"+projectId+"/locations/global/activityTypes/serviceAccountLastAuthentication/activities:query"}
              auth:
                type: OAuth2
                scopes: "https://www.googleapis.com/auth/cloud-platform"
              headers:
                Accept: "application/json"
              query:
                pageSize: 5000
            result: saActivities
        - ProcessSAActivities:
            try:
              for:
                value: activity
                in: ${saActivities.body.activities}
                steps:
                - AssignVars:
                    try:
                      assign:
                      - tmp: ${text.split(activity.fullResourceName,"/")}
                      - email: ${tmp[len(tmp)-1]}
                      - lastAuthTime: ${activity.activity.lastAuthenticatedTime}
                      - lastAuthTimeInSec: ${time.parse(lastAuthTime)}
                    except:
                      as: e
                      assign:
                      - lastAuthTime: ""
                      - lastAuthTimeInSec: ${lastActiveTime - 1}
                - CheckActvityTime:
                    switch:
                    - condition: ${ lastAuthTimeInSec <  lastActiveTime}
                      steps:
                      - BuildInsightText:
                          assign:
                          - insightText: ${"For Project" +projectId + " for Service account = " + email + " and lastAuthenticatedTime = " +  lastAuthTime }
                          - returnInsights: ${list.concat(returnInsights, insightText)}
                      - LogInsight:
                          call: sys.log
                          args:
                            text: ${insightText}
                            severity: "WARNING"
            except:
              as: e
  - return_value:
      return: ${returnInsights}
